#
# Backup configuration example. 
#
# Copyright (c) 2009 Sebastien Varrette     (http://varrette.gforge.uni.lu/)
#
# For more info: backup(1) and http://ibackup.gforge.uni.lu
#
# Please adapt it to reflect your own configuration. 
# 

######## Default global settings ########
# You SHOULD have a global section
<global>
	use_duplicity = no                           # By default, don't use duplicity but simply rsync. 
	log_file      = /tmp/backup.log              # location of the log file
	#patternfile_exclude  = $HOME/.rsync_exclude  # the file containing file patterns that should NOT be synchronized
			       			     # be synchronized (one pattern per line)
	#ssh_auth_sock = /tmp/502/SSHKeychain.socket  # ssh-agent configuration (here from SSHKeychain)
	#ssh_auth_sock = `/usr/sbin/lsof | grep Listeners | grep ssh-agent | awk '{print $8}'` # ssh-agent socket on Mac OS X (> 10.5)

	# Default backup configuration 
	src_rootdir   = $HOME                        # Root directory on the (local) source
	dst_rootdir   = /                            # Root directory on destination
	# Space separated list of directories to include or exclude from synchronization 
	# (relative to src_rootdir). 
	# The use of the wildcards * is supported (for instance '*' select all subdirectories 
	# (including the hidden one) of src_rootdir. 
	# You may use more complicated pattern mixing ^, * and $ special characters such as
	#     ^AR* : all directories that start with AR
	#     *ES$ : all directories that ends with  ES
	#     ^.*  : all hidden directories (the one that start by '.')
	include_dir           = *
	exclude_dir           = ^.* Downloads  Library   Music  Public  Movies   Pictures  Sites
	# Eventually, add exception to exclude_dir (nice if you used wildcards in it)
	exclude_dir_exception = .emacs.d  .ssh   .gnupg
	# Special handle for the .ssh directory  
	<Directory .ssh>
		 src_in_subfolder = `hostname` 
	</Directory>
</global>

############ Configuration of your backups ############
# You SHOULD have a default backup definition (here on a external harddrive)
<default>
	target_url = drive:///Volumes/FalkorDrive/Backup
</default>

# Now put one section per backup configuration. 
# Call backup on each 

#########################################################
# Example of backup on a local drive
# This configuration will synchronize into /Volumes/Backup/$HOME/ (as src_dir is configured to $HOME)
<testdrive>
	target_url = drive:///Volumes/Backup		
</testdrive>

#########################################################
# Example of backup on a remote server you access by SSH
<testssh>
	restrict_on_subnet = 10.91      # backup only when your machine is connected on this subnet
	target_url         = ssh://login@server:8022  # ssh connection on the port 8022)
	dst_rootdir        = /home/backup/`whoami`@FalkorMacbook
	# Special treatment of your local "Music" directory
	<Directory Music>
		 dst_rootdir = /multimedia # put it in /multimedia on the server  
	</Directory>
</testssh>

###################################################
# Example of backup on an [Encrypted] sparsebundle 
# /!\ work only on Mac OS X 
# This configuration will mount the sparsebundle image (in /Volumes/ImageName let's say) 
# and synchronize $HOME/bin in /Volumes/ImageName/Backup/$HOME/bin
<testsparsebundle>
	target_url  = sparsebundle://$HOME/path/to/image.sparsebundle
	dst_rootdir = Backup
	include_dir = bin
</testsparsebundle>

###################################################
# Example of backup in remote NAS (volume volname) you access by AFP with a username
# and a password (better placed in a separate file precised by the pass_file directive) 
# /!\ work only on Mac OS X
#
# Example 1:
# This configuration will mount the NAS volume volname (in /Volumes/volname typically) 
# and synchronize in /Volumes/volname/myBackup/$HOME/ (as src_dir is configured to $HOME)
<testafp1>
	target_url  = afp://user:password@server/volname
	dst_rootdir = myBackup
</testafp1>
# Example 2: same as Ex1 but put the password in a separate file 
# Password file format per line:   afp://user@server/volname    password
# /!\ put the proper rights to this file (600) but avoid this approach if possible as it 
#     still expose your password. 
# NOTE: this approach appeared necessary for authenticated mounts because the command line 
# 'mount_afp' used internally no longer use the password stored in the keychain ;(
<testafp2>
	target_url  = afp://user@server/volname
	pass_file   = $HOME/path/to/backup_passwd_file
	dst_rootdir = myBackup
</testafp2>
# Example 3: add directly the path to the backup directory on the NAS
<testafp3>
	target_url  = afp://user@server/volname/myBackup
	pass_file   = $HOME/path/to/backup_passwd_file
</testafp3>
############ (The most useful for me until now ;) ) ##################
# Example 4: put the path to an [encrypted] sparsebundle on the NAS ;)
# This configuration will mount the NAS volume volname (in /Volumes/volname typically) 
# then mount the sparsebundle image /Volumes/volname/path/to/image.sparsebundle 
# (in /Volumes/ImageName let's say) and finally synchronize in 
# /Volumes/ImageName/myBackup/$HOME/ (as src_dir is configured to $HOME)
<testafp4>
	target_url  = afp://user@server/volname/path/to/image.sparsebundle
	pass_file   = $HOME/path/to/backup_passwd_file # Eventually, put this directive in the global section
	dst_rootdir = myBackup
</testafp4>

